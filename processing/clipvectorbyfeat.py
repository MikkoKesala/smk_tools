# -*- coding: utf-8 -*-

"""
/***************************************************************************
 smk_tools
                                 A QGIS plugin
 Suomen metsäkeskuksen työkalut
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-04
        copyright            : (C) 2022 by Suomen metsäkeskus
        email                : mikko.kesala@metsakeskus.fi
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
from stat import S_ISLNK
from qgis import processing
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import QCoreApplication,QVariant
from qgis.core import (QgsProcessing,QgsProcessingAlgorithm,
                       QgsFeatureSink,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsProcessingUtils)
import os,time,sys
sys.path.append(os.path.dirname(__file__))
#from PIL import Image
from smk_geotools import feature2Layer,joinIntersection
#from saastopuu import *
pluginPath = os.path.abspath(
    os.path.join(
        os.path.dirname(__file__),
        os.pardir))


class cliprasterbyfeat(QgsProcessingAlgorithm):

    

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        #inputs
        self.addParameter(QgsProcessingParameterVectorLayer('vector', 'vector', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('clip', 'clip', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        #self.addParameter(QgsProcessingParameterField('rastername', 'rastername', type=QgsProcessingParameterField.Any, parentLayerParameterName='vector', allowMultiple=False, defaultValue='fid'))
        #self.addParameter(QgsProcessingParameterFile('outfolder', 'outfolder', behavior=QgsProcessingParameterFile.Folder, fileFilter='All files (*.*)', defaultValue='C:\\Users\\mjkesala\\pvenv\\aineistot\\rasterit'))
        self.addParameter(QgsProcessingParameterFeatureSink('clipped', 'clipped'))

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        results = {}
        outputs = {}
        try:
 
            source = QgsProcessingUtils.mapLayerFromString(parameters['vector'],context)
            #source = self.parameterAsSource(parameters, self.INPUT, context)
            if source.featureCount() > 100:
                feedback.reportError("Input layer has too many features. 100 features is maximum. Process failed.")
                sys.exit()

            #feedback.pushInfo(str(parameters['INPUT']))
            source = processing.run("native:dissolve", {'INPUT':parameters['clip'],'FIELD':[],'OUTPUT':'TEMPORARY_OUTPUT'},context=context,feedback=feedback,is_child_algorithm=True)
            source = processing.run("native:multiparttosingleparts", {'INPUT':source['OUTPUT'],'OUTPUT':'TEMPORARY_OUTPUT'},context=context,feedback=feedback,is_child_algorithm=False)
            source = source['OUTPUT']
           
            
            # Compute the number of steps to display within the progress bar and
            #slayer = QgsVectorLayer(parameters['INPUT'],"slayer","ogr")
            # get features from source
            
            total = 100.0 / source.featureCount() if source.featureCount() else 0
            number = source.featureCount()

            features = source.getFeatures()
            #raster_list = []
            feedback.pushInfo(str(number))
        except Exception as e:
                feedback.pushWarning(e)

        for current, feature in enumerate(features):
            #feedback.setProgressText("testia ja "+str(out))
            # Stop the algorithm if cancel button has been clicked
            try:
                if feedback.isCanceled():
                    break
                
                feedback.setProgressText("Rajataan aineistot")

                #leimFeat = feature.getFeatures()
                leimArea = [feature.geometry().area()/10000]
                out = feature2Layer(feature,0)
                #out1 = feature2Layer(feature,0)
                out.setCrs(source.crs())
                #out1.setCrs(source.crs())
                #leim = addFieldValue(out1,"leimikko",1)
                #clip = joinIntersection(out,parameters['vector'],'',False)
                clip = processing.run("native:clip", 
                               {'INPUT':parameters['vector'],'OVERLAY':out,'OUTPUT':'TEMPORARY_OUTPUT'},context=context,feedback=feedback,is_child_algorithm=False)
                clip = clip['OUTPUT']
                feedback.setProgressText("Feature: "+ str(current+1)+" / "+str(number))
                feedback.setProgress(int(current+1/total*100))
                #raster = QgsProcessingUtils.mapLayerFromString(parameters['raster'],context)
                #raster = clipRaster4(raster,out,parameters['outfolder'],current)
                #raster_list.append(raster)
                    
                    #out = outChm
                if current == 0:
                    (sink, dest_id) = self.parameterAsSink(parameters,'clipped',context,
                        clip.fields(), clip.wkbType(), clip.crs())
                
                #feedback.pushInfo(str(out.fields().names()))
                outFeats = clip.getFeatures()
                for outFeat in outFeats:
                    #feedback.pushInfo(str(outFeat['CHM']))
                    sink.addFeature(outFeat, QgsFeatureSink.FastInsert)

            except Exception as e:
                feedback.pushWarning(e)        
   
        
        results['clip'] = dest_id

        return results


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'ClipVectorFeatByFeat'

    def icon(self):
        
        return QIcon(os.path.join(pluginPath, 'icon.jpg'))
    
    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'SMK luontotieto'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return cliprasterbyfeat()
