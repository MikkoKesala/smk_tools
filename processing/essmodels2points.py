# -*- coding: utf-8 -*-

"""
/***************************************************************************
 smk_tools
                                 A QGIS plugin
 Suomen metsäkeskuksen työkalut
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-04
        copyright            : (C) 2022 by Suomen metsäkeskus
        email                : mikko.kesala@metsakeskus.fi
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Suomen metsäkeskus'
__date__ = '2022-10-04'
__copyright__ = '(C) 2022 by Suomen metsäkeskus'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
from stat import S_ISLNK
from qgis import processing
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import QCoreApplication,QVariant
from qgis.core import (QgsProcessing,QgsProcessingParameterField,
                       QgsField,QgsProcessingParameterBoolean,
                       QgsFeatureSink,
                       QgsProcessingParameterFeatureSource,QgsProcessingParameterRasterLayer,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterMapLayer,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterDefinition,
                       QgsProcessingUtils,QgsRasterLayer,QgsVectorLayer)
import os,time,sys
sys.path.append(os.path.dirname(__file__))
#from PIL import Image
from getInput import getWebRasterLayer,getWebVectorLayer,getProtectedSites
from smk_geotools import feature2Layer,createTreeMap,addFieldValue,joinIntersection
from smk_essmodels import runEssModel2points

#from saastopuu import *
#sys.path.append(os.path.dirname(__file__))
pluginPath = os.path.abspath(
    os.path.join(
        os.path.dirname(__file__),
        os.pardir))


class essmodels2points(QgsProcessingAlgorithm):


    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    FOSFORI = 'FOSFORI'
    DTW = 'DTW'
    BIOD = 'BIOD'
    LAHOP = 'LAHOP'
    PUUM = 'PUUM'

    chm_data = 'https://avoin.metsakeskus.fi/rajapinnat/v1/CHM_newest/ows?'
    grid_data = 'https://avoin.metsakeskus.fi/rajapinnat/v1/gridcell/ows?'
    stand_data = 'https://avoin.metsakeskus.fi/rajapinnat/v1/stand/ows?'
    dtw_data = 'https://paituli.csc.fi/geoserver/paituli/wcs?'
    mkasviv_data = 'https://paikkatieto.ymparisto.fi/arcgis/rest/services/INSPIRE/SYKE_EliomaantieteellisetAlueet/MapServer/0'
    euc_data = 'https://aineistot.metsakeskus.fi/metsakeskus/rest/services/Vesiensuojelu/euclidean/ImageServer'
    
    stand_name = 'stand'
    gname = 'gridcell'
    dtw_name = 'paituli:luke_dtw_04'
    mkasviv_name = 'eliogeoalue'

    stand_fields = 'SPECIALFEATURECODE,SPECIALFEATUREADDITIONALCODE,GEOMETRY'
    grid_fields = 'GEOMETRY,FERTILITYCLASS,STEMCOUNTPINE,STEMCOUNTDECIDUOUS,STEMCOUNTSPRUCE,MEANDIAMETERDECIDUOUS,MEANDIAMETERPINE,MEANDIAMETERSPRUCE'
    mkasviv_fields = 'PaajakoNro,Nimi'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        self.addParameter(QgsProcessingParameterFeatureSource('points', 'points', types=[QgsProcessing.TypeVectorPoint], defaultValue=None))
        self.addParameter(QgsProcessingParameterField('diameter', 'diameter', type=QgsProcessingParameterField.Numeric, parentLayerParameterName='points', allowMultiple=False, defaultValue='diameter'))
        self.addParameter(QgsProcessingParameterField('species', 'species', type=QgsProcessingParameterField.Numeric, parentLayerParameterName='points', allowMultiple=False, defaultValue='species'))
        # We add the input vector features source. It can have any kind of
        # geometry.
        #self.addParameter(QgsProcessingParameterFeatureSource('cutting', 'cutting', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
       
        

        #self.addParameter(QgsProcessingParameterBoolean('hotspot', 'calculate hotspot', defaultValue=True))
        #self.addParameter(QgsProcessingParameterRasterDestination('LeikattuLatvus', 'leikattu latvus', createByDefault=True, defaultValue=None))
        #self.addParameter(QgsProcessingParameterFeatureSink('LeikattuHila', 'Leikattu hila', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, defaultValue=None))
        params = []

        params.append(
            QgsProcessingParameterEnum(
                self.FOSFORI,
                self.tr('Ravinteiden pidättyminen'),
                options=['Ei painotusta','Pieni','Keskimääräinen','Suuri'],
                defaultValue=1
            )
            )

        params.append(
            QgsProcessingParameterEnum(
                self.DTW,
                self.tr('Maaperän kosteus'),
                options=['Ei painotusta','Pieni','Keskimääräinen','Suuri'],
                defaultValue=1
            )
            )

        params.append(
            QgsProcessingParameterEnum(
                self.BIOD,
                self.tr('Puuston monimuotoisuus'),
                options=['Ei painotusta','Pieni','Keskimääräinen','Suuri'],
                defaultValue=1
            )
            )

        params.append(
            QgsProcessingParameterEnum(
                self.LAHOP,
                self.tr('Lahopuupotentiaali'),
                options=['Ei painotusta','Pieni','Keskimääräinen','Suuri'],
                defaultValue=1
            )
            )
        

        for p in params:
            p.setFlags(p.flags() | QgsProcessingParameterDefinition.FlagAdvanced) 
            self.addParameter(p)


        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('points')
            )
        )
    def processAlgorithm(self, parameters, context, feedback):
            """
            Here is where the processing itself takes place.
            """
            feedb = {1:feedback.setProgressText,
                    2:feedback.pushWarning,
                    3:feedback.reportError}
            # Retrieve the feature source and sink. The 'dest_id' variable is used
            # to uniquely identify the feature sink, and must be included in the
            # dictionary returned by the processAlgorithm function.
            alg_params = {'DISSOLVE':True,'DISTANCE': 50,'END_CAP_STYLE': 0,'INPUT': parameters['pisteet'],'JOIN_STYLE': 0,'MITER_LIMIT': 1,'SEGMENTS': 5,'OUTPUT':'TEMPORARY_OUTPUT'}
            source = processing.run('native:buffer', alg_params, context=context, feedback=feedback, is_child_algorithm=False)['OUTPUT']

            #if parameters['hotspot']==True:
            features = source.getFeatures()
            for current, feature in enumerate(features):
                if feedback.isCanceled():
                    break
            
                feedback.setProgressText("Haetaan aineistot rajapinnasta")

                #leimFeat = feature.getFeatures()
                out = feature2Layer(feature,100)
                #out1 = feature2Layer(feature,0)
                out.setCrs(source.crs())
                #out1.setCrs(source.crs())
                
                dtw = getWebRasterLayer(out,self.dtw_data,self.dtw_name)
                feedb[dtw[2]](dtw[1])

                biogeo = getWebVectorLayer(out,self.mkasviv_data,self.mkasviv_name,self.mkasviv_fields)
                feedb[biogeo[2]](biogeo[1])

                euc = getWebRasterLayer(out,self.euc_data,"")
                feedb[euc[2]](euc[1])

                fgrid = getWebVectorLayer(out,self.grid_data,self.gname,self.grid_fields)
                feedb[fgrid[2]](fgrid[1])

                points = parameters['points']
                points = joinIntersection(outChm,fgrid[0],list(self.grid_fields.split(",")))
                points = joinIntersection(outChm,biogeo[0],[])

                if dtw[2]==1:
                    outChm = processing.run("native:rastersampling", {'INPUT':outChm,'RASTERCOPY':dtw[0],'COLUMN_PREFIX':'DTW_','OUTPUT':'TEMPORARY_OUTPUT'})
                    outChm = outChm['OUTPUT']
                else:
                    outChm.dataProvider().addAttributes([QgsField("DTW_1",QVariant.Double)])
                    outChm.updateFields()
                    
                if euc[2]==1:
                    outChm = processing.run("native:rastersampling", {'INPUT':outChm,'RASTERCOPY':euc[0],'COLUMN_PREFIX':'euc_','OUTPUT':'TEMPORARY_OUTPUT'})
                    outChm = outChm['OUTPUT']
                else:
                    outChm.dataProvider().addAttributes([QgsField("euc_1",QVariant.Double)])
                    outChm.updateFields()

                feedback.setProgressText("Lasketaan ympäristötekijöiden arvot")
                feedback.setProgress(60)
            

                fosf = self.parameterAsInt(parameters,self.FOSFORI,context)
                dtw = self.parameterAsInt(parameters,self.DTW,context)
                biod = self.parameterAsInt(parameters,self.BIOD,context)
                lahop = self.parameterAsInt(parameters,self.LAHOP,context)

                weights ={"NP":float(fosf),"BIO":float(biod),"LP":float(lahop),"DTW":float(dtw)}
                #runEssModel2points
                feedback.pushInfo(str(parameters['diameter']))
                if current == 0:
                    (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,context,
                    out.fields(), out.wkbType(), out.crs())
                #feedback.pushInfo(str(out.fields().names()))
                outFeats = out.getFeatures()
                for outFeat in outFeats:
                    #feedback.pushInfo(str(outFeat['CHM']))
                    sink.addFeature(outFeat, QgsFeatureSink.FastInsert)
            
                layer = QgsProcessingUtils.mapLayerFromString(dest_id, context)

            return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Laske ekosysteemipalveluarvot'

    def icon(self):
        
        return QIcon(os.path.join(pluginPath, 'icon.jpg'))

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'SMK luontotieto'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return essmodels2points()