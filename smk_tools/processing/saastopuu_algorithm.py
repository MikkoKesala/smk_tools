# -*- coding: utf-8 -*-

"""
/***************************************************************************
 smk_tools
                                 A QGIS plugin
 Suomen metsäkeskuksen työkalut
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-04
        copyright            : (C) 2022 by Suomen metsäkeskus
        email                : mikko.kesala@metsakeskus.fi
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Suomen metsäkeskus'
__date__ = '2022-10-04'
__copyright__ = '(C) 2022 by Suomen metsäkeskus'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
from stat import S_ISLNK
from qgis import processing
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import QCoreApplication,QVariant
from qgis.core import (QgsProcessing,
                       QgsField,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterDefinition,
                       QgsProcessingUtils)
import os,time,sys
sys.path.append(os.path.dirname(__file__))
#from PIL import Image
from getInput import getWebRasterLayer,getWebVectorLayer,getProtectedSites
from smk_geotools import feature2Layer,createTreeMap,addFieldValue,joinIntersection,point2area
from smk_essmodels import runEssModel
#from saastopuu import *
pluginPath = os.path.abspath(
    os.path.join(
        os.path.dirname(__file__),
        os.pardir))

class saastopuu_toolsAlgorithm(QgsProcessingAlgorithm):


    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    AREAS = 'AREAS'
    FOSFORI = 'FOSFORI'
    DTW = 'DTW'
    BIOD = 'BIOD'
    LAHOP = 'LAHOP'
    PUUM = 'PUUM'
    INPUT = 'INPUT'

    delfields = ['fid','OBJECTID','layer','path','leimikko','SPECIALFEATURECODE', 'SPECIALFEATUREADDITIONALCODE', 'DEVELOPMENTCLASS', 'STEMCOUNTPINE', 'STEMCOUNTDECIDUOUS', 'STEMCOUNTSPRUCE', 'PaajakoNro', 'Nimi_2','MEANDIAMETERDECIDUOUS', 'MEANDIAMETERPINE', 'MEANDIAMETERSPRUCE', 'MEANHEIGHTDECIDUOUS', 'MEANHEIGHTPINE', 'MEANHEIGHTSPRUCE']

    chm_data = 'https://avoin.metsakeskus.fi/rajapinnat/v1/CHM_newest/ows?'
    grid_data = 'https://avoin.metsakeskus.fi/rajapinnat/v1/gridcell/ows?'
    stand_data = 'https://avoin.metsakeskus.fi/rajapinnat/v1/stand/ows?'
    dtw_data = 'https://paituli.csc.fi/geoserver/paituli/wcs?'
    mkasviv_data = 'https://paikkatieto.ymparisto.fi/arcgis/rest/services/INSPIRE/SYKE_EliomaantieteellisetAlueet/MapServer/0'
    euc_data = 'https://aineistot.metsakeskus.fi/metsakeskus/rest/services/Vesiensuojelu/euclidean/ImageServer'
    
    stand_name = 'stand'
    gname = 'gridcell'
    dtw_name = 'paituli:luke_dtw_04'
    mkasviv_name = 'eliogeoalue'

    stand_fields = 'SPECIALFEATURECODE,SPECIALFEATUREADDITIONALCODE,GEOMETRY'
    grid_fields = 'GEOMETRY,FERTILITYCLASS,DEVELOPMENTCLASS,STEMCOUNTPINE,STEMCOUNTDECIDUOUS,STEMCOUNTSPRUCE,MEANDIAMETERDECIDUOUS,MEANDIAMETERPINE,MEANDIAMETERSPRUCE,MEANHEIGHTDECIDUOUS,MEANHEIGHTPINE,MEANHEIGHTSPRUCE'
    mkasviv_fields = 'PaajakoNro,Nimi'


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Leimikko'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )
        params = []

        params.append(
            QgsProcessingParameterEnum(
                self.FOSFORI,
                self.tr('Ravinteiden pidättyminen'),
                options=['Ei painotusta','Pieni','Keskimääräinen','Suuri'],
                defaultValue=1
            )
            )

        params.append(
            QgsProcessingParameterEnum(
                self.DTW,
                self.tr('Maaperän kosteus'),
                options=['Ei painotusta','Pieni','Keskimääräinen','Suuri'],
                defaultValue=1
            )
            )

        params.append(
            QgsProcessingParameterEnum(
                self.BIOD,
                self.tr('Puuston monimuotoisuus'),
                options=['Ei painotusta','Pieni','Keskimääräinen','Suuri'],
                defaultValue=1
            )
            )

        params.append(
            QgsProcessingParameterEnum(
                self.LAHOP,
                self.tr('Lahopuupotentiaali'),
                options=['Ei painotusta','Pieni','Keskimääräinen','Suuri'],
                defaultValue=1
            )
            )
        

        for p in params:
            p.setFlags(p.flags() | QgsProcessingParameterDefinition.FlagAdvanced) 
            self.addParameter(p)

        self.addParameter(
            QgsProcessingParameterNumber(
                self.PUUM,
                self.tr('Säästöpuiden määrä (kpl /ha)'),
                type=QgsProcessingParameterNumber.Integer,
                minValue=5,maxValue=30,defaultValue=10
            )
            )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Puiden ekologiset arvot')
            )
        )
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.AREAS,
                self.tr('Säästöpuuehdotus')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        feedb = {1:feedback.setProgressText,
                2:feedback.pushWarning,
                3:feedback.reportError}
        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)
        if source.featureCount() > 20:
            feedback.reportError("Input layer has too many features. 20 features is maximum. Process failed.")
            sys.exit()

        #feedback.pushInfo(str(parameters['INPUT']))
        source = processing.run("native:dissolve", {'INPUT':parameters['INPUT'],'FIELD':[],'OUTPUT':'TEMPORARY_OUTPUT'})
        source = processing.run("native:multiparttosingleparts", {'INPUT':source['OUTPUT'],'OUTPUT':'TEMPORARY_OUTPUT'})
        source = source['OUTPUT']
       
        
        # Compute the number of steps to display within the progress bar and
        #slayer = QgsVectorLayer(parameters['INPUT'],"slayer","ogr")
        # get features from source
        
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        
        features = source.getFeatures()
        for current, feature in enumerate(features):
            #feedback.setProgressText("testia ja "+str(out))
            # Stop the algorithm if cancel button has been clicked
            situ = int((current+1) / total*100)
            if feedback.isCanceled():
                break

            feedback.setProgressText("Haetaan aineistot rajapinnasta")

            #leimFeat = feature.getFeatures()
            leimArea = [feature.geometry().area()/10000]
            out = feature2Layer(feature,100)
            out1 = feature2Layer(feature,0)
            out.setCrs(source.crs())
            out1.setCrs(source.crs())

            chm = getWebRasterLayer(out,self.chm_data,"",True)
            feedb[chm[2]](chm[1])
            if chm[2]==3:
                break
            
            stand = getWebVectorLayer(out,self.stand_data,self.stand_name,self.stand_fields,False)
            feedb[stand[2]](stand[1])
   

            fgrid = getWebVectorLayer(out,self.grid_data,self.gname,self.grid_fields,True)
            feedb[fgrid[2]](fgrid[1])
            if fgrid[2]==3:
                break

            dtw = getWebRasterLayer(out,self.dtw_data,self.dtw_name,False)
            feedb[dtw[2]](dtw[1])

            biogeo = getWebVectorLayer(out,self.mkasviv_data,self.mkasviv_name,self.mkasviv_fields,True)
            feedb[biogeo[2]](biogeo[1])
            if biogeo[2]==3:
                break

            euc = getWebRasterLayer(out,self.euc_data,"",False)
            feedb[euc[2]](euc[1])
            
            proSites = getProtectedSites(out)
            leim = addFieldValue(out1,"leimikko",1)
            #joinList = [stand,fgrid,biogeo,proSites]
            #print (proSites)
            #if proSites is not None
            feedback.setProgress(situ*0.10)

            
            feedback.setProgressText("Luodaan puukartta latvusmallista")
            feedback.setProgress(situ*0.20)
            #print (chm)
            #chm =processRaster(chm[0])
            
            outChm = createTreeMap(chm[0],3,True)

            feedback.setProgress(situ*0.40)

            feedback.setProgressText("Toteutetaan spatiaalinen liitos aineistoille")
            feedback.setProgress(situ*0.50)


            outChm = joinIntersection(outChm,stand[0],list(self.stand_fields.split(",")),False)
            outChm = joinIntersection(outChm,fgrid[0],list(self.grid_fields.split(",")),False)
            outChm = joinIntersection(outChm,biogeo[0],[],False)
            outChm = joinIntersection(outChm,proSites,[],False)
            outChm = joinIntersection(outChm,leim,['leimikko'],False)

            if dtw[2]==1:
                outChm = processing.run("native:rastersampling", {'INPUT':outChm,'RASTERCOPY':dtw[0],'COLUMN_PREFIX':'DTW_','OUTPUT':'TEMPORARY_OUTPUT'})
                outChm = outChm['OUTPUT']
            else:
                outChm.dataProvider().addAttributes([QgsField("DTW_1",QVariant.Double)])
                outChm.updateFields()
                
            if euc[2]==1:
                outChm = processing.run("native:rastersampling", {'INPUT':outChm,'RASTERCOPY':euc[0],'COLUMN_PREFIX':'euc_','OUTPUT':'TEMPORARY_OUTPUT'})
                outChm = outChm['OUTPUT']
            else:
                outChm.dataProvider().addAttributes([QgsField("euc_1",QVariant.Double)])
                outChm.updateFields()

            feedback.setProgressText("Lasketaan ympäristötekijöiden arvot")
            feedback.setProgress(situ*0.60)
            

            fosf = self.parameterAsInt(parameters,self.FOSFORI,context)
            dtw = self.parameterAsInt(parameters,self.DTW,context)
            biod = self.parameterAsInt(parameters,self.BIOD,context)
            lahop = self.parameterAsInt(parameters,self.LAHOP,context)
            weights ={"NP":float(fosf),"BIO":float(biod),"LP":float(lahop),"DTW":float(dtw)}
            puuMaara = self.parameterAsInt(parameters,self.PUUM,context)
            
            out = runEssModel(outChm,weights,puuMaara,leimArea[0],'PaajakoNro')
            #calculateEnvValue(outChm,weights)

            #feedback.setProgressText("Hakkuuala: "+str(round(leimArea[0],2))+"\nsäästöpuiden määrä: "+str(int(puuMaara*leimArea[0])))
            
            idx=[out.fields().indexFromName(n) for n in self.delfields]
            #idx.append(out.fields().indexFromName('fid'))
            #idx.append(out.fields().indexFromName('OBJECTID'))
            out.dataProvider().deleteAttributes(idx)
            out.updateFields()


            style = os.path.join(os.path.dirname(__file__),"reTree3.qml")
        
            #out = outChm['OUTPUT']
            # Add a feature in the sink
            if current == 0:
                (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,context,
                    out.fields(), out.wkbType(), out.crs())
            #feedback.pushInfo(str(out.fields().names()))
            outFeats = out.getFeatures()
            for outFeat in outFeats:
                #feedback.pushInfo(str(outFeat['CHM']))
                sink.addFeature(outFeat, QgsFeatureSink.FastInsert)
        
            layer = QgsProcessingUtils.mapLayerFromString(dest_id, context)
            feedback.setProgressText("Hakkuukohteen "+ str(current+1)+"/"+str(total)+" elinympäristöarvot tarkasteltu")
            # Update the progress bar
            feedback.setProgress(int(situ))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        try:
            layer.loadNamedStyle(style)
            style2 = os.path.join(os.path.dirname(__file__),"retreet_areas.qml")
            reareas = point2area(layer,'reTree',1)
            
            (sink, area_id) = self.parameterAsSink(parameters, self.AREAS,context,
                        reareas.fields(), reareas.wkbType(), reareas.crs())
            outFeats = reareas.getFeatures()
            for outFeat in outFeats:
                    #feedback.pushInfo(str(outFeat['CHM']))
                    sink.addFeature(outFeat, QgsFeatureSink.FastInsert)
            
            layer2 = QgsProcessingUtils.mapLayerFromString(area_id, context)
            layer2.loadNamedStyle(style2)

            return {self.OUTPUT: dest_id,self.AREAS:area_id}
        except:
            feedback.reportError("Säästöpuuehdotusta ei pystytty toteuttamaan alueelle")

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Säästöpuuehdotus'

    def icon(self):
        
        return QIcon(os.path.join(pluginPath, 'icon.jpg'))

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'SMK luontotieto'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return saastopuu_toolsAlgorithm()
